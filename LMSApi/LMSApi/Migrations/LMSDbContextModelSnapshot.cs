// <auto-generated />
using System;
using LMSApi.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMSApi.Migrations
{
    [DbContext(typeof(LMSDbContext))]
    partial class LMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMSBase.Models.Domain.Coach", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Codelab", b =>
                {
                    b.Property<int>("CodelabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodelabId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LearningModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodelabId");

                    b.HasIndex("LearningModuleId");

                    b.ToTable("Codelabs");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StatusId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.LearningModule", b =>
                {
                    b.Property<int>("LearningModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningModuleId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("LearningModuleId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("LearningModules");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.SchoolClass", b =>
                {
                    b.Property<int>("SchoolClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolClassId"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("SchoolClassId");

                    b.HasIndex("CoachId");

                    b.HasIndex("StatusId");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Student", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.StudentCodelab", b =>
                {
                    b.Property<int>("StudentCodelabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentCodelabId"));

                    b.Property<int>("CodelabId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentCodelabId");

                    b.HasIndex("CodelabId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentCodelab");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Codelab", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.LearningModule", "LearningModule")
                        .WithMany("Codelabs")
                        .HasForeignKey("LearningModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningModule");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Course", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.SchoolClass", "SchoolClass")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSBase.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SchoolClass");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.LearningModule", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSBase.Models.Domain.LearningModule", "Parent")
                        .WithMany("SubModules")
                        .HasForeignKey("ParentId");

                    b.HasOne("LMSBase.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Parent");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.SchoolClass", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.Coach", "Coach")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSBase.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coach");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Student", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.SchoolClass", "SchoolClass")
                        .WithMany("Students")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.StudentCodelab", b =>
                {
                    b.HasOne("LMSBase.Models.Domain.Codelab", "Codelab")
                        .WithMany("StudentCodelabs")
                        .HasForeignKey("CodelabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSBase.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LMSBase.Models.Domain.Student", "Student")
                        .WithMany("StudentCodelabs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Codelab");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Coach", b =>
                {
                    b.Navigation("SchoolClasses");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Codelab", b =>
                {
                    b.Navigation("StudentCodelabs");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Course", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.LearningModule", b =>
                {
                    b.Navigation("Codelabs");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.SchoolClass", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LMSBase.Models.Domain.Student", b =>
                {
                    b.Navigation("StudentCodelabs");
                });
#pragma warning restore 612, 618
        }
    }
}
